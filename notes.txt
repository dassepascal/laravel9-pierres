Laravel Debugbar
composer require barryvdh/laravel-debugbar --dev

Api information à envoyer mes endpoints

principes: database de pierres
creation du model : php artisan make:model Stone -m

creation du seeder: php artisan make:seeder StoneTableSeeder

dans dataseeder
$this ->call(StoneTableSeeder::class)

factory:
php artisan make:factory StoneFactory --model=Stone

seeder

class StoneTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Stone::factory(30)->create();
        //
    }
}


php artisan migrate --seed

install de bootstrap
composer require laravel/ui
php artisan ui bootstrap --auth
npm install
Step 5: Import vite.config.js Bootstrap 5 Path
First, you need to change vite.config.js and add the bootstrap 5 path & remove resources/css/app.css
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';
import path from 'path'

export default defineConfig({
    plugins: [
        laravel([
            'resources/js/app.js',
        ]),
    ],
    resolve: {
        alias: {
            '~bootstrap': path.resolve(__dirname, 'node_modules/bootstrap'),
        }
    },
});
Step 6: Update bootstrap.js
We need to use import instead of require.


pagination
creation du repertoire vendor dans resources
creation du sous repertoire pagination
creation du fichier custom

StoneRequest
php artisan make:request StoneRequest

   public function authorize()
    {
        return true;
    }


implementer la function store
   public function store(Request $request)
    {
        dd($request->all());
    }


passage à true pour permettre à la requéte de passer

definition des rules

creation d'un observer
php artisan make:observer StoneObserver --model=Stone

php artisan tinker
mise en place du slug
dans AppServiceProvider

  public function boot()
    {
        Stone::observe(StoneObserver::class);
    }

php artisan db:seed --class=StoneTableSeeder
ne pas oublier de vider la table Stone

creation d'un helper
composer require laravel/helpers

route dynamique
Route::get('/stones/{slug}',[MainController::class,'show'])->name('stone');

creation du lien qui va afficher la perre en détail
    <a href="{{ route('stone',$stone->slug) }}" class="btn btn-primary text-light"> Lire
                            la
                            suite</a>

Dans MainController
methode show
  public function show($slug){
        $stone = Stone::where('slug', $slug)->firstOrFail();
        dd($stone);
        return view('stone',[
            'stone'=>$stone,
        ]);
    }

    Authentification:

creation des boutons me connecter et deconnecte dans incs

dans Auth/RegisterController.php

changement de la direction quand l'utilisateur est identifié:  protected $redirectTo = '/';

loginController:  protected $redirectTo = ('/');

modification des views register et login


gestion des roles
ajout dans la table user : $table->string('role');

refaire les tablephp artisan migrate:refresh

RegisterController
modification de la methode pour le role:

protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
            'role'=>'USER',
        ]);
    }

dans model user
'role'


role admin
creer un seeder: php artisan make:seed UserSeeder
dans UserSeeder
public function run()
    {
        User::create([
            'email'=>'admin@admin.com',
            'name'=>'admin',
            'password'=>Hash::make('toor'),
            'role'=>User::ADMIN_ROLE,
        ]);
    }

centralisation des infos des roles
creation des const dans model user

 const USER_ROLE = 'USER';
    const ADMIN_ROLE = 'ADMIN';

    utilisation des const dans RegisterController et UserSeeder

middleware
creation d'un controller
php artisan make:controller StoneController -r

route
Route::get('/admin/stones',[StoneController::class,'index']);

test de la route
http://127.0.0.1:8000/admin/stones

creation d'un middleware
php artisan make:middleware AdminMiddleware

on va verifier 2 choses:
//est ce que la personne est connecté?
// ne pas laisse passer les personnes avec le role user

if(Auth::user()){
    die('AUTHENTICATED')
}
die(' Not auth')
return $next($request);

il va rien se passer si pas de route il faut enregistre dans le kernel:
'admin' => \App\Http\Middleware\AdminMiddleware::class,
    ];
web
:
changement du redirect dans RedirectIfAuthenticated
public function handle(Request $request, Closure $next, ...$guards)
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect('/');
            }
        }

        return $next($request);
    }

ajout d'un editeur de text
<script src="https://cdn.tiny.cloud/1/vxfcf4bxrnn14o8lr9sboey5yz954t62d6ar3izu54gkctb3/tinymce/6/tinymce.min.js"
        referrerpolicy="origin"></script>


pb d'affichage dans stone.blade.php : impossible de centrer {!! $stone->properties !!}

cas ou enregistre avec les champs vide:
SQLSTATE[23000]: Integrity constraint violation: 1048 Le champ 'name' ne peut être vide (null)

Validation des données:
php artisan make:request StoneRequest

creation des rules :
public function rules()
    {
        return [
            'name'=>'required|min:3|max:50',
            'composition_chimique'=>'required|min:6|max:100',
            'density'=>'required|max:1',
            'hardness'=>'required|max:1',
            'chakra'=>'required|max:100',
            'system_cristalin'=>'required|max:1',
            'origin'=>'required|max:10',
            'scarcity'=>'required|max:1',
            'propertie'=>'required|max:255',
            'purification'=>'required|max:20',

            //todo
            //'image'=>'required',

        ];
    }

    modification du controller StoneController
    avant :public function store(Request $request)

    apres :public function store(StoneRequest $request)

    implementation des messages

    dans edit : @dump(Sesion::all());

    mise en place de la variable dans store :
    $validated = $request->validated();

    dans la vue verification des erreurs dans le template create.blade.php
    @extends('base')

@section('content')
@dump($errors->all());

result: un tableau vide
si on enregistre on a:
array:10 [▼ // resources\views/stones/create.blade.php
  0 => "The name field is required."
  1 => "The composition chimique field is required."
  2 => "The density field is required."
  3 => "The hardness field is required."
  4 => "The chakra field is required."
  5 => "The system cristalin field is required."
  6 => "The origin field is required."
  7 => "The scarcity field is required."
  8 => "The propertie field is required."
  9 => "The purification field is required."
]

affichage au niveau du champ:
  @error('name')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror

            result :rien ne s'afficher
            .invalid-feeback { display:none}

route binding
avant
  public function show($slug){
        $stone = Stone::where('slug', $slug)->firstOrFail();

        return view('stone',[
            'stone'=>$stone,
        ]);
    }
    apres
      public function show(Stone $stone){
        $stone = Stone::where('slug', $slug)->firstOrFail();

        return view('stone',[
            'stone'=>$stone,
        ]);
    }


methode delete
Route:delete('/admin/stones/{slug}',[stoneController::class,'delete])->middleware('admin')->name('stones.delete);


methode modifier une pierre

ne pas oublier de modifier observer car quand on modifie une pierre le slug ne change pas
dans StoneObserver
  public function updated(Stone $stone)
    {
        $stone->slug = Str::slug($stone->name,'-');
        $stone->saveQuietly();
    }




utilisation du manager
 creer repertoire : manager
 creer fichier : StoneManager.php

 class StoneManager
{

    public function build(Stone $stone, StoneRequest $request){
        $stone->name = $request->input('name');
        $stone->composition_chimique = $request->input('composition_chimique');
        $stone->density = $request->input('density');
        $stone->hardness = $request->input('hardness');
        $stone->chakra = $request->input('chakra');
        $stone->system_cristalin = $request->input('system_cristalin');
        $stone->origin = $request->input('origin');
        $stone->scarcity = $request->input('scarcity');
        $stone->properties = $request->input('properties');
        $stone->purification = $request->input('purification');

        $stone->save();
    }
}

dans StoneController

creer la function:
 /**
     * definition  StoneController build
     * service
     * class
     * injected
     */

    private $stoneManager;
    public function __construct(StoneManager $stoneManager)
    {
        $this->stoneManager = $stoneManager;
    }

test:

  public function update(StoneRequest $request, Stone $stone)
    {
        //dd($stone);
        dd($this->stoneManager);

        $stone->name = $request->input('name');
        $stone->composition_chimique = $request->input('composition_chimique');
        $stone->density = $request->input('density');
        $stone->hardness = $request->input('hardness');
        $stone->chakra = $request->input('chakra');
        $stone->system_cristalin = $request->input('system_cristalin');
        $stone->origin = $request->input('origin');
        $stone->scarcity = $request->input('scarcity');
        $stone->properties = $request->input('properties');
        $stone->purification = $request->input('purification');

        $stone->save();
        return redirect()->route('stones.index')->with('success', "La pierre a bien modifié !");
    }

    test 2 :
      public function update(StoneRequest $request, Stone $stone)
    {
        //dd($stone);
        //dd($this->stoneManager);
        dd(get_class($this->stoneManager));

        $stone->name = $request->input('name');
        $stone->composition_chimique = $request->input('composition_chimique');
        $stone->density = $request->input('density');
        $stone->hardness = $request->input('hardness');
        $stone->chakra = $request->input('chakra');
        $stone->system_cristalin = $request->input('system_cristalin');
        $stone->origin = $request->input('origin');
        $stone->scarcity = $request->input('scarcity');
        $stone->properties = $request->input('properties');
        $stone->purification = $request->input('purification');

        $stone->save();
        return redirect()->route('stones.index')->with('success', "La pierre a bien modifié !");
    }

meme resultat
test 3:
  public function update(StoneRequest $request, Stone $stone)
    {
        //dd($stone);
        //dd($this->stoneManager);
        dd(get_class_methods($this->stoneManager));

        $stone->name = $request->input('name');
        $stone->composition_chimique = $request->input('composition_chimique');
        $stone->density = $request->input('density');
        $stone->hardness = $request->input('hardness');
        $stone->chakra = $request->input('chakra');
        $stone->system_cristalin = $request->input('system_cristalin');
        $stone->origin = $request->input('origin');
        $stone->scarcity = $request->input('scarcity');
        $stone->properties = $request->input('properties');
        $stone->purification = $request->input('purification');

        $stone->save();
        return redirect()->route('stones.index')->with('success', "La pierre a bien modifié !");
    }

result:

array:1 [▼ // app\Http\Controllers\StoneController.php:114
  0 => "build"
]


relation

php artisan make:model Category -m

changement de la table stone
public function up()
    {
        Schema::create('stones', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('composition_chimique');
            $table->integer('density');
            $table->integer('hardness');
            $table->string('chakra');
            $table->string('system_cristalin');
            $table->string('origin');
            $table->integer('scarcity');
            $table->text('properties');
            $table->string('purification');
            $table->string('image')->nullable();
            $table->string('slug')->nullable();
            $table->unsignedBigInteger('category_id');
            $table->foreignId('category_id')->references('id')->on('categories');
            $table->timestamps();
        });
    }
Attention pb de migration
php artisan migrate:reset
modifier l'ordre des tables pour placer la table stone en dernier à cause des cleé étrangères


creation de categorySeeder

methode assignement de masse
dans model
protected $fillable = ['rouge','orange','jaune','vert','bleu','indigo','violet','rose','blanc','noir'];

php artisan db:seed --class=CategorySeeder

ne pas oublier de ajouter category_id au fillable du Stone

public function definition()
    {
        return [

            'name'=>$this->faker->word(),
             'composition_chimique'=>$this->faker->sentence(3) ,
             'density'=>$this->faker->randomDigit(),
             'hardness'=>$this->faker->biasedNumberBetween($min = 1, $max = 8, $function = 'sqrt'),
             'chakra'=>$this->faker->sentence(3,true),
            'system_cristalin'=>$this->faker->word(),
            'origin'=>$this->faker->sentence(3,true),
            'scarcity'=>$this->faker->biasedNumberBetween($min = 1, $max = 3, $function = 'sqrt'),
            'properties'=>$this->faker->text($maxNbChars = 50),
            'purification'=>$this->faker->sentence(3),
            'image'=>$this->faker->imageUrl(),
            'category_id'=>Category::inRandomOrder()->first()->id,

        ];
    }

    testdans stone.blade.php
    @dump($stone)
 creation d'une relation plus poussé pour recupzerer directement un objet Category depuis stone

 ajout des methodes entre nos node_modules

mise a jour dans create

  public function create()
    {
        return view('stones.create',[
            'categories'=>Category::all(),
        ]);
    }
/*****************************************/
@extends('base')

@section('content')
{{-- to do --}}
 @dump($categories)

<div class="container">
    <h1 class="text-center my-5">Créer une nouvelle pierre</h1>
<form action="{{ route('stones.store') }}" method="POST" >
    @csrf
    <div class="col-12">
        <div class="form-group">
            <label for="validationServer01" class="form-label"> Nom</label>
            <input type="text" name="name" class="form-control "  placeholder="nom de la pierre">
            @error('name')
            <span class="valid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label >Composition chimique </label>
            <input type="text" name="composition_chimique" class="form-control" placeholder="la composition chimique">
            @error('composition_chimique')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Densité</label>
            <input type="text" name="density" class="form-control" placeholder="la densité">
            @error('density')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Dureté</label>
            <input type="text" name="hardness" class="form-control" placeholder="la dureté">
            @error('hardness')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Chakra</label>
            <input type="text" name="chakra" class="form-control" placeholder=" le nom du chakra">
            @error('chakra')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Le système cristallin </label>
            <input type="text" name="system_cristalin" class="form-control" placeholder="le systeme cristalin">
            @error('system_cristalin')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Origine</label>
            <input type="text" name="origin" class="form-control" placeholder="le pays d'origine">
            @error('origin')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > Rareté</label>
            <input type="text" name="scarcity" class="form-control" placeholder="rareté">
            @error('system_cristalin')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label for="validationTextarea"> Les propriétés</label>
            <textarea id="tinycme-editor" name="properties" class="form-control w-100" id="validationTextarea"></textarea>
            @error('properties')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>

        <script>
            tinymce.init({
                selector: '#tinycme-editor',

            });
        </script>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label >Purification</label>
            <input type="text" name="purification" class="form-control" placeholder="les procédés de purification">
            @error('system_cristalin')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="col-12">
        <div class="form-group">
            <label > image</label>
            <input type="text" name="image" class="form-control" placeholder="image">
            @error('system_cristalin')
            <span class="invalid-feedback" role="alert">
                <strong> {{ $message }}</strong>
            </span>
            @enderror
        </div>
    </div>
    <div class="d-flex justify-content-center mb-5 mt-2 ">
        <button type="submit" class="btn btn-primary"> Enregistrer</button>
    </div>
</form>
</div>



@endsection

/*********************************************************************/

test:


    public function build(Stone $stone, StoneRequest $request){
        dd('request',$request->all());
        $stone->name = $request->input('name');
        $stone->composition_chimique = $request->input('composition_chimique');
        $stone->density = $request->input('density');
        $stone->hardness = $request->input('hardness');
        $stone->chakra = $request->input('chakra');
        $stone->system_cristalin = $request->input('system_cristalin');
        $stone->origin = $request->input('origin');
        $stone->scarcity = $request->input('scarcity');
        $stone->properties = $request->input('properties');
        $stone->purification = $request->input('purification');

        $stone->save();
    }
}


probleme de
la category dans edit

mise en place d'un correctif
ternaire:  <option value="{{  $category->id }}"  {{ $category->id === $stone->category->id ? 'selected':'' }}>{{ $category->label }}</option>
